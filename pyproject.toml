[project]
name = "roux"
version = "0.1.3"
description = "Convenience functions."
authors = [
  { name = "rraadd88", email = "rohanadandage@gmail.com" }
]
urls = { "Homepage" = "http://github.com/rraadd88/roux" }
requires-python = '>=3.7, <4'
classifiers = [
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
]

license = "GPL-3.0-or-later"

readme = "README.md"
dependencies = [
    "numpy>=1.17.3",
    "pandas>=0.25.3,<=2.1.4",
    "pyyaml>=5.1",
    "matplotlib>=2.2",
    "seaborn>=0.8",
    "tqdm>=4.38.0", # logging
    # "regex>=2018.7.11",
]

[dependencies.groups]
interactive = [
    "ipywidgets",
    "ipykernel",
    # "watermark", # session info
]
data = [
    "openpyxl", # special io
]
fast = [
    "pyarrow", # fast
]
stat = [
    "scipy>=1.1.0",
    "statsmodels",
    "networkx",
    "scikit-learn",
        ]
viz = [
    "altair",
      ]
workflow = [
    "omegaconf",
    "papermill",
    "argh",
    "ruff",
    "nbconvert",
    "removestar",
]

## union (perhaps would be made default)
all = [
## interactive = [
    "ipywidgets",
    "ipykernel",
    # "watermark", # session info
## ]
## data = [
    "openpyxl", # special io
## ]
## fast = [
    "pyarrow", # fast
## ]
## stat = [
    "scipy>=1.1.0",
    "statsmodels",
    "networkx",
    "scikit-learn",
##        ]
## viz = [
    "altair",
##       ]
## workflow = [
    "omegaconf",
    "papermill",
    "argh",
    "ruff",
    "nbconvert",
    "removestar",
## ]    
]

## development and maintenance
dev = [
    "pytest",
    "tox-gh-actions",
    "jupyter","ipywidgets","ipykernel",
    # "sphinx","recommonmark",
    "black",
    "coveralls == 3.*",
    "flake8",
    "isort",
    "pytest-cov >= 2,< 6",
    "testbook",
    "lazydocs", "regex", ## docs
]
lint = [
  "ruff"
]

[project.scripts]
roux = "roux.run:parser.dispatch"

[tool.black]
experimental-string-processing = true
line-length = 120
skip-string-normalization = true

[tool.isort]
profile = "black"