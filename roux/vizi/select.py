# AUTOGENERATED! DO NOT EDIT! File to edit: ../../examples/roux_vizi_select.ipynb.

# %% auto 0
__all__ = ['plotsi_image']

# %% ../../examples/roux_vizi_select.ipynb 3
import logging
import altair as alt
    
def plotsi_image(
    data,
    x : str,
    y : str,
    col_id : str,
    col_url: str,
    figsize=[
        400,
        200,
    ],
    kws_img={},
    **kws_sca,#=dict(size=200),
    ):
    ## to avoid interference
    col_x=x
    del x
    col_y=y
    del y    

    img_local_paths=data.query(f"~`{col_url}`.str.startswith('http')")[col_url].unique().tolist()
    
    if len(img_local_paths)>0:
        logging.warning(f"{len(img_local_paths)} local paths found; converting to base64 ..")
        from roux.viz.io import to_data
        data=data.assign(
            **{
            col_url:lambda df: df[col_url].map({p:to_data(p) for p in img_local_paths}),
        }
        )
    
    row=data.iloc[0,:]
    
    # Selection for interactivity
    selection_point = alt.selection_point(
        fields=[
            col_id
        ],
        # default
        value=[{col_id:row[col_id]}],
    )
    
    points = (
        alt.Chart(data)
        .mark_circle(
            **kws_sca
        )
        .encode(
            x=col_x,
            y=col_y,
            tooltip=col_id,
            color=alt.condition(selection_point, if_true=alt.value('blue'), if_false=alt.value('gray'),legend=None),
        )
        .properties(
            width=figsize[0]//2,
            height=figsize[1],
        )
        .add_params(
            # brush
            selection_point
        )
    )

    
    imgs = (
        alt.Chart(data)
        .mark_image(
            **kws_img
        )
        .encode(
            url=col_url
        )
        .properties(
            width=figsize[0]//2,
            height=figsize[1],
        )
        .facet(
            alt.Facet(col_url, title='', header=alt.Header(labelFontSize=0))
        )
        .transform_filter(
            selection_point
            # brush
        )
    )
    
    return (
        (points | imgs)
        .configure_axis(
            grid=False
        )
        .configure_view(
            stroke=None
        )
    )
