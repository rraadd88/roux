# AUTOGENERATED! DO NOT EDIT! File to edit: ../../examples/roux_viz_shapes.ipynb.

# %% auto 0
__all__ = ['get_patch_centroids']

# %% ../../examples/roux_viz_shapes.ipynb 2
"""shapes of plotting functions."""

import numpy as np
def get_patch_centroids(
    patch_collection
    ):
    """
    Calculates the centroids for each patch in a PatchCollection.

    Args:
        patch_collection: A matplotlib.collections.PatchCollection object.

    Returns:
        A numpy array of shape (N, 2) where N is the number of patches,
        containing the (x, y) coordinates of each patch's centroid.
    """
    centroids = []

    # Get the offsets, which are the base coordinates for each patch
    offsets = patch_collection.get_offsets()

    # Get the paths. Note that get_paths() returns the Path objects
    # for the collection, not the individual patches. These are typically
    # a set of base paths (e.g., a unit circle) that are then transformed
    # and offset for each patch.
    paths = patch_collection.get_paths()
    if not offsets.any() and paths:
        # If there are no offsets, patches are defined by their path vertices directly
        for path in paths:
            vertices = path.vertices
            centroid = np.mean(vertices, axis=0)
            centroids.append(centroid)
    elif offsets.any() and paths:
        # This is the common case where a base path (e.g., a unit circle)
        # is offset for each patch
        base_path_vertices = paths[0].vertices  # Assume one base path
        base_centroid = np.mean(base_path_vertices, axis=0)
        
        # The centroid of each patch is the base centroid + its offset
        centroids = offsets + base_centroid
    else:
        # Fallback for simpler patches that have a get_center() method
        for patch in patch_collection.patches:
            if hasattr(patch, 'get_center'):
                centroids.append(patch.get_center())
            else:
                # For more complex patches, we can use the bounding box center
                bbox = patch.get_path().get_extents(patch.get_transform())
                centroids.append(bbox.get_points().mean(axis=0))

    return np.array(centroids).mean(axis=0)
