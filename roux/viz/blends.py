# AUTOGENERATED! DO NOT EDIT! File to edit: ../../examples/roux_viz_blends.ipynb.

# %% auto 0
__all__ = ['plot_ranks', 'plot_dists_by_bins']

# %% ../../examples/roux_viz_blends.ipynb 2
"""Blends of plotting functions."""

import matplotlib.pyplot as plt
import pandas as pd
import roux.lib.df as rd #noqa

def plot_ranks(
    data: pd.DataFrame,
    kws_plot: dict,
    col: str,
    colid: str,
    col_label: str = None,
    xlim_min: float = -20,
    ax=None,
):
    if col_label is None:
        col_label = colid
    if ax is None:
        ax = plt.gca()
    from roux.viz.scatter import plot_ranks

    ax, data1 = plot_ranks(
        data,
        col=col,
        colid=colid,
        ranks_on="x",
        ascending=False,
        line=True,
        show_topn=kws_plot["topn"],
        ax=ax,
    )
    from roux.viz.annot import annot_side_curved

    ax = annot_side_curved(
        data1.sort_values("rank").head(kws_plot["topn"]),
        colx="rank",
        coly=col,
        x=ax.get_xlim()[1],  # *0.3,
        ylim=[
            ax.get_ylim()[0]
            + ((ax.get_ylim()[1] - ax.get_ylim()[0]) * kws_plot["ylim_fr"][0]),
            ax.get_ylim()[0]
            + ((ax.get_ylim()[1] - ax.get_ylim()[0]) * kws_plot["ylim_fr"][1]),
        ],
        col_label=col_label,
        ax=ax,
        ha="right",
        **kws_plot["annot_side_curved"],
    )
    ax.set(
        xlim=[
            xlim_min,
            ax.get_xlim()[1],
        ]
    )
    ax.set(xticks=[1, ax.get_xticks()[ax.get_xticks() < ax.get_xlim()[1]].max()])
    from roux.viz.ax_ import format_ax

    format_ax()
    return ax

from roux.viz.figure import get_ax
def plot_dists_by_bins(
    data,
    x,
    y, # bin
    bins,
    show_corr=False, ## also taked kws
    corr_offs=[0,0],
    ax=None,
    **kws_plot_dists,
    ):
    ## binning
    data=(
        data
        .rd.get_bins(
            col=y,
            bins=bins,
            dtype='float',
        )
        .sort_values(f"{y} bin",ascending=False)
        .astype(
            {f"{y} bin":str}
        )
    )
    # if kws_plot_dists.get('order',None) is None:
    #     kws_plot_dists['order']

    from roux.viz.dist import plot_dists
    ax=plot_dists(
        data,
        x=x,
        y=f"{y} bin",
        showfliers=False,
        
        ax=get_ax(ax),
        **kws_plot_dists,
    )
    if show_corr!=False:
        if show_corr==True:
            kws_show_corr={}
        assert isinstance(kws_show_corr,dict)
        from roux.viz.annot import show_scatter_stats
        show_scatter_stats(
            ax=ax,
            data=data,
            x=x,
            y=y,
            **{
                **dict(
                    z=None,
                    method='spearman',
                    
                    show_n=False,
                    show_p=False,
                    resample=True,
                    
                    kws_set_label=dict(
                        x=-0.25+corr_offs[0],
                        y=-0.125+corr_offs[1],
                        ha='center',
                        va='center',
                        linespacing=0.75,
                    ),
                ),
                **kws_show_corr,
            },
        )
    ax.set(
        ylabel=y,
    )
    return ax
